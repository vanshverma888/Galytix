// Galytix Web API Project
// This is a simple Web API that reads a CSV file and calculates average insurance premiums (GWP)
// for a given country and lines of business (e.g., "property", "transport").

// File 1: Galytix.WebApi.csproj
// This is the project file. It tells .NET what kind of app this is, what version to use,
// and which libraries (like ASP.NET Core and Swagger) we need. It also makes sure the "Data" folder
// and the CSV file are included when we run the app.
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType> <!-- Makes this a runnable program -->
    <TargetFramework>netcoreapp3.1</TargetFramework> <!-- Uses .NET Core 3.1 -->
  </PropertyGroup>
  <ItemGroup>
    <!-- These are libraries we need for the API to work -->
    <PackageReference Include="Microsoft.AspNetCore" Version="2.2.0" /> <!-- Core web stuff -->
    <PackageReference Include="Microsoft.AspNetCore.Hosting" Version="2.2.7" /> <!-- Hosting tools -->
    <PackageReference Include="Microsoft.AspNetCore.Hosting.Abstractions" Version="2.2.0" /> <!-- Hosting helpers -->
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Versioning" Version="4.2.0" /> <!-- API versioning -->
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer" Version="4.2.0" /> <!-- Version explorer -->
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="5.0.0" /> <!-- Hosting system -->
    <PackageReference Include="Swashbuckle.AspNetCore.Swagger" Version="5.6.3" /> <!-- Swagger docs -->
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerGen" Version="5.6.3" /> <!-- Swagger generator -->
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerUI" Version="5.6.3" /> <!-- Swagger UI -->
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Data\" /> <!-- Creates a "Data" folder in the project -->
    <None Update="Data\gwpByCountry.csv">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory> <!-- Copies CSV to output -->
    </None>
  </ItemGroup>
</Project>

// File 2: Program.cs
// This is where the app starts. It sets up the web server to listen on port 9091
// and tells it to use the Startup class to configure everything.
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

namespace Galytix.WebApi
{
    class Program
    {
        static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run(); // Starts the app
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args) // Default setup
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseUrls("http://*:9091"); // Runs on port 9091
                    webBuilder.UseKestrel(); // Uses Kestrel web server
                    webBuilder.UseStartup<Startup>(); // Points to Startup.cs for config
                });
    }
}

// File 3: Startup.cs
// This file sets up the app’s services (like controllers and our GWP service)
// and defines how requests are handled (e.g., routing, Swagger UI).
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Galytix.WebApi.Services;

namespace Galytix.WebApi
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration; // Loads app settings (not used here)
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers(); // Enables API controllers
            services.AddSwaggerGen(); // Adds Swagger for API docs
            services.AddSingleton<IGwpService, GwpService>(); // Registers our GWP service (loads once)
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseSwagger(); // Enables Swagger
            app.UseSwaggerUI(c => // Sets up Swagger UI
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Galytix WebApi");
            });

            if (env.IsDevelopment()) // Shows error details in dev mode
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection(); // Forces HTTPS (optional here)
            app.UseRouting(); // Sets up routing for requests
            app.UseAuthorization(); // Adds auth (not used here)
            app.UseEndpoints(endpoints => // Maps controllers to routes
            {
                endpoints.MapControllers();
            });
        }
    }
}

// File 4: Models/GwpData.cs
// This is a simple class to hold data from the CSV: a country, a line of business (LOB),
// and 16 years of GWP values (2000-2015).
namespace Galytix.WebApi.Models
{
    public class GwpData
    {
        public string Country { get; set; } // e.g., "ae"
        public string LineOfBusiness { get; set; } // e.g., "transport"
        public double[] YearlyGwp { get; set; } = new double[16]; // GWP for 2000-2015
    }
}

// File 5: Services/GwpService.cs
// This service loads the CSV into memory when the app starts and calculates averages
// when asked. It’s reusable and runs async for better performance.
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;

namespace Galytix.WebApi.Services
{
    public interface IGwpService // Defines what this service can do
    {
        Task<Dictionary<string, double>> CalculateAverageGwp(string country, List<string> lobs);
    }

    public class GwpService : IGwpService
    {
        private readonly List<GwpData> _gwpData; // Holds CSV data in memory

        public GwpService(IWebHostEnvironment env) // Loads CSV when service starts
        {
            _gwpData = LoadCsvData(Path.Combine(env.ContentRootPath, "Data", "gwpByCountry.csv"));
        }

        private List<GwpData> LoadCsvData(string filePath) // Reads CSV into a list
        {
            var data = new List<GwpData>();
            var lines = File.ReadAllLines(filePath).Skip(1); // Skips header row

            foreach (var line in lines)
            {
                var columns = line.Split(','); // Splits each row by commas
                if (columns.Length < 20) continue; // Skips invalid rows

                var gwp = new GwpData
                {
                    Country = columns[0].Trim(), // Country code (col 0)
                    LineOfBusiness = columns[3].Trim() // LOB (col 3)
                };

                // Loads GWP values from 2000-2015 (cols 4-19)
                for (int i = 0; i < 16; i++)
                {
                    if (double.TryParse(columns[i + 4], out double value))
                    {
                        gwp.YearlyGwp[i] = value; // Only sets if valid number
                    }
                }

                data.Add(gwp); // Adds row to list
            }

            return data;
        }

        public async Task<Dictionary<string, double>> CalculateAverageGwp(string country, List<string> lobs)
        {
            return await Task.Run(() => // Runs async
            {
                var result = new Dictionary<string, double>(); // Stores LOB:average pairs

                // Filters data for the country and groups by LOB
                var countryData = _gwpData.Where(d => d.Country.Equals(country, StringComparison.OrdinalIgnoreCase))
                                         .GroupBy(d => d.LineOfBusiness)
                                         .ToDictionary(g => g.Key, g => g.First());

                foreach (var lob in lobs) // For each requested LOB
                {
                    if (countryData.TryGetValue(lob, out var data)) // If LOB exists
                    {
                        var validGwp = data.YearlyGwp.Where(g => g > 0).ToList(); // Takes non-zero values
                        result[lob] = validGwp.Any() ? validGwp.Average() : 0; // Averages or 0
                    }
                    else
                    {
                        result[lob] = 0; // 0 if LOB not found
                    }
                }

                return result; // Returns averages as a dictionary
            });
        }
    }
}

// File 6: Controllers/CountryGwpController.cs
// This controller handles the POST request to /api/gwp/avg, checks the input,
// and uses the service to get averages.
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Galytix.WebApi.Services;

namespace Galytix.WebApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")] // Routes to /api/CountryGwp
    public class CountryGwpController : ControllerBase
    {
        private readonly IGwpService _gwpService; // Uses the service

        public CountryGwpController(IGwpService gwpService) // Gets service via DI
        {
            _gwpService = gwpService;
        }

        public class GwpRequest // Defines expected input format
        {
            [Required] // Must have a country
            public string Country { get; set; }

            [Required] // Must have at least one LOB
            public List<string> Lob { get; set; }
        }

        [HttpPost("avg")] // Handles POST to /api/CountryGwp/avg
        public async Task<IActionResult> GetAverageGwp([FromBody] GwpRequest request)
        {
            if (!ModelState.IsValid) // Checks if input is valid
            {
                return BadRequest("Invalid request data."); // Returns 400 if not
            }

            try
            {
                var averages = await _gwpService.CalculateAverageGwp(request.Country, request.Lob); // Gets averages
                return Ok(averages); // Returns 200 with results
            }
            catch (Exception ex) // Catches any errors
            {
                return StatusCode(500, $"An error occurred: {ex.Message}"); // Returns 500 if something breaks
            }
        }
    }
}

// File 7: Data/gwpByCountry.csv
// This is the data file with GWP values. It’s loaded by GwpService.
// Below is a tiny sample—use the full version from your original message!
country,variableId,variableName,lineOfBusiness,Y2000,Y2001,Y2002,Y2003,Y2004,Y2005,Y2006,Y2007,Y2008,Y2009,Y2010,Y2011,Y2012,Y2013,Y2014,Y2015
ae,gwp,Direct Premiums,transport,,,,,,,,231441262.7,268744928.7,284448918.2,314413884.1,327740154.4,326126300.6,240322742.6,234164748.7,
ae,gwp,Direct Premiums,property,,,,,,,,422555207.6,446001906.1,581850238.3,617352212.4,684477603.8,658736555.5,593685815.4,611083582.9,
[... full CSV content goes here ...]