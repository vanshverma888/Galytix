// File 1: Galytix.WebApi.csproj
// Defines the project, dependencies, and ensures the Data folder is included.
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Hosting" Version="2.2.7" />
    <PackageReference Include="Microsoft.AspNetCore.Hosting.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Versioning" Version="4.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer" Version="4.2.0" />
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="5.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore.Swagger" Version="5.6.3" />
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerGen" Version="5.6.3" />
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerUI" Version="5.6.3" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Data\" />
    <None Update="Data\gwpByCountry.csv">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>
</Project>

// File 2: Program.cs
// Entry point, sets up the web host on port 9091.
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

namespace Galytix.WebApi
{
    class Program
    {
        static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseUrls("http://*:9091");
                    webBuilder.UseKestrel();    
                    webBuilder.UseStartup<Startup>();
                });
    }
}

// File 3: Startup.cs
// Configures services (DI) and middleware (Swagger, routing).
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Galytix.WebApi.Services;

namespace Galytix.WebApi
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            services.AddSwaggerGen();
            services.AddSingleton<IGwpService, GwpService>(); // Register service for DI
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Galytix WebApi");
            });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();
            app.UseRouting();
            app.UseAuthorization();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}

// File 4: Models/GwpData.cs
// Model for CSV data: country, LOB, and yearly GWP values.
namespace Galytix.WebApi.Models
{
    public class GwpData
    {
        public string Country { get; set; }
        public string LineOfBusiness { get; set; }
        public double[] YearlyGwp { get; set; } = new double[16]; // 2000-2015
    }
}

// File 5: Services/GwpService.cs
// Service to load CSV and calculate averages asynchronously.
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;

namespace Galytix.WebApi.Services
{
    public interface IGwpService
    {
        Task<Dictionary<string, double>> CalculateAverageGwp(string country, List<string> lobs);
    }

    public class GwpService : IGwpService
    {
        private readonly List<GwpData> _gwpData;

        public GwpService(IWebHostEnvironment env)
        {
            _gwpData = LoadCsvData(Path.Combine(env.ContentRootPath, "Data", "gwpByCountry.csv"));
        }

        private List<GwpData> LoadCsvData(string filePath)
        {
            var data = new List<GwpData>();
            var lines = File.ReadAllLines(filePath).Skip(1); // Skip header

            foreach (var line in lines)
            {
                var columns = line.Split(',');
                if (columns.Length < 20) continue;

                var gwp = new GwpData
                {
                    Country = columns[0].Trim(),
                    LineOfBusiness = columns[3].Trim()
                };

                for (int i = 0; i < 16; i++)
                {
                    if (double.TryParse(columns[i + 4], out double value))
                    {
                        gwp.YearlyGwp[i] = value;
                    }
                }

                data.Add(gwp);
            }

            return data;
        }

        public async Task<Dictionary<string, double>> CalculateAverageGwp(string country, List<string> lobs)
        {
            return await Task.Run(() =>
            {
                var result = new Dictionary<string, double>();

                var countryData = _gwpData.Where(d => d.Country.Equals(country, StringComparison.OrdinalIgnoreCase))
                                         .GroupBy(d => d.LineOfBusiness)
                                         .ToDictionary(g => g.Key, g => g.First());

                foreach (var lob in lobs)
                {
                    if (countryData.TryGetValue(lob, out var data))
                    {
                        var validGwp = data.YearlyGwp.Where(g => g > 0).ToList();
                        result[lob] = validGwp.Any() ? validGwp.Average() : 0;
                    }
                    else
                    {
                        result[lob] = 0;
                    }
                }

                return result;
            });
        }
    }
}

// File 6: Controllers/CountryGwpController.cs
// Controller to handle POST requests and return averages.
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Galytix.WebApi.Services;

namespace Galytix.WebApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CountryGwpController : ControllerBase
    {
        private readonly IGwpService _gwpService;

        public CountryGwpController(IGwpService gwpService)
        {
            _gwpService = gwpService;
        }

        public class GwpRequest
        {
            [Required]
            public string Country { get; set; }

            [Required]
            public List<string> Lob { get; set; }
        }

        [HttpPost("avg")]
        public async Task<IActionResult> GetAverageGwp([FromBody] GwpRequest request)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest("Invalid request data.");
            }

            try
            {
                var averages = await _gwpService.CalculateAverageGwp(request.Country, request.Lob);
                return Ok(averages);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred: {ex.Message}");
            }
        }
    }
}

// File 7: Data/gwpByCountry.csv
// CSV data (abbreviated here; use the full version from your original message).
country,variableId,variableName,lineOfBusiness,Y2000,Y2001,Y2002,Y2003,Y2004,Y2005,Y2006,Y2007,Y2008,Y2009,Y2010,Y2011,Y2012,Y2013,Y2014,Y2015
ae,gwp,Direct Premiums,transport,,,,,,,,231441262.7,268744928.7,284448918.2,314413884.1,327740154.4,326126300.6,240322742.6,234164748.7,
ae,gwp,Direct Premiums,property,,,,,,,,422555207.6,446001906.1,581850238.3,617352212.4,684477603.8,658736555.5,593685815.4,611083582.9,
[... full CSV content goes here ...]